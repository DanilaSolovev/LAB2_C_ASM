


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000                 AREA             |.text|, CODE, READONLY
    3 00000000         array_res_asm
                               PROC                         ; –ù–∞—á–∞–ª–æ —Ñ—É
                                                            –Ω–∫—Ü–∏–∏ array_tr
                                                            eatment_asm
    4 00000000                 EXPORT           array_res_asm
    5 00000000         ; –§—É–Ω–∫—Ü–∏—è (–ø—Ä–æ—Ü–µ–¥—É—Ä–∞) —Ä–µ–∞–ª–∏–∑—É–µ—Ç
                        –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞—Å—Å–∏–≤–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç
                       –≤–∏–∏ —Å –∑–∞–¥–∞–Ω–∏–µ–º 
    6 00000000         ; –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –
                       Ω–∞ –º–∞—Å—Å–∏–≤ —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä R0,
    7 00000000         ; —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä 
                       R1,
    8 00000000         ; —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —á–µ
                       —Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä R2
    9 00000000         ; R0 = *array
   10 00000000         ; R1 = size(array)
   11 00000000 F04F 0300       MOV              R3, #0x00
   12 00000004 F04F 0904       MOV              R9, #0x04
   13 00000008 FB09 F901       MUL              R9, R1
   14 0000000C B500            PUSH             {LR}
   15 0000000E EBAD 0D09       SUB              SP,R9
   16 00000012 466A            MOV              R2,SP       ;=mas_parity
   17 00000014 F7FF FFFE       BL               parity_prog
   18 00000018 B081            SUB              SP, #0x04
   19 0000001A 4669            MOV              R1, SP      ;=MAX_SIZEpar
   20 0000001C 6008            STR              R0, [R1, #0]
   21 0000001E         
   22 0000001E         
   23 0000001E         
   24 0000001E 4669            MOV              R1, SP      ;=MAX_SIZEpar
   25 00000020 6809            LDR              R1, [R1, #0]
   26 00000022 B001            ADD              SP, #0x04
   27 00000024 4668            MOV              R0, SP      ;=mas_parity
   28 00000026 B081            SUB              SP, #0x04
   29 00000028 EBAD 0D09       SUB              SP, R9
   30 0000002C 466A            MOV              R2, SP      ;=mas_positive
   31 0000002E F7FF FFFE       BL               positive_prog
   32 00000032 B081            SUB              SP, #0x04
   33 00000034 4669            MOV              R1, SP      ;=MAX_SIZEpos
   34 00000036 6008            STR              R0, [R1, #0x00]
   35 00000038         
   36 00000038         
   37 00000038 4669            MOV              R1, SP      ;=MAX_SIZEpos
   38 0000003A 6809            LDR              R1, [R1, #0x00]
   39 0000003C B001            ADD              SP, #0x04
   40 0000003E 4668            MOV              R0, SP      ;=mas_positive
   41 00000040 F7FF FFFE       BL               avg_prog
   42 00000044         
   43 00000044         ;–í–æ–∑–≤—Ä–∞—Ç
   44 00000044 44CD            ADD              SP, R9
   45 00000046 9900            LDR              R1, [SP, #0x00]
   46 00000048 B001            ADD              SP, #0x04
   47 0000004A 44CD            ADD              SP, R9
   48 0000004C F85D EB04       POP              {LR}
   49 00000050 4770            BX               LR
   50 00000052                 ENDP
   51 00000052         



ARM Macro Assembler    Page 2 


   52 00000052         parity_prog
                               PROC
   53 00000052         ; –§—É–Ω–∫—Ü–∏—è (–ø—Ä–æ—Ü–µ–¥—É—Ä–∞) –æ–ø—Ä–µ–¥–µ–ª—è–µ
                       —Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ —Å —á–µ—Ç–Ω—ã–º –∏–Ω–
                       ¥–µ–∫—Å–æ–º
   54 00000052         ; –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –
                       Ω–∞ –º–∞—Å—Å–∏–≤ —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä R0,
   55 00000052         ; —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä 
                       R1,
   56 00000052         ; —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —á–µ
                       —Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä R2
   57 00000052         ; R0 = *array
   58 00000052         ; R1 = size(array)
   59 00000052         ; R2 = *new_array
   60 00000052         
   61 00000052         srav
   62 00000052 428B            CMP              R3, R1
   63 00000054 D017            BEQ              exit
   64 00000056 F04F 0602       MOV              R6, #0x02
   65 0000005A F04F 0704       MOV              R7, #0x04
   66 0000005E F04F 0804       MOV              R8, #0x04
   67 00000062 FBB3 F5F6       UDIV             R5, R3, R6
   68 00000066 FB05 F506       MUL              R5, R5, R6
   69 0000006A 429D            CMP              R5, R3
   70 0000006C D108            BNE              iplus
   71 0000006E FB07 F703       MUL              R7,R3
   72 00000072 59C5            LDR              R5, [R0, R7]
   73 00000074 FB08 F804       MUL              R8,R4
   74 00000078 F842 5008       STR              R5, [R2, R8]
   75 0000007C F104 0401       ADD              R4, #0x01
   76 00000080         iplus
   77 00000080 F103 0301       ADD              R3, #0x01
   78 00000084 E7E5            B                srav
   79 00000086         exit
   80 00000086 F04F 0300       MOV              R3, #0x00
   81 0000008A 4620            MOV              R0, R4
   82 0000008C F04F 0400       MOV              R4, #0x00
   83 00000090 4770            BX               LR
   84 00000092                 ENDP                         ; –ö–æ–Ω–µ—Ü –ø—Ä–æ
                                                            –≥—Ä–∞–º–º—ã
   85 00000092         
   86 00000092         
   87 00000092         positive_prog
                               PROC
   88 00000092         ; –§—É–Ω–∫—Ü–∏—è (–ø—Ä–æ—Ü–µ–¥—É—Ä–∞) –æ–ø—Ä–µ–¥–µ–ª—è–µ
                       —Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–
                       ∏–≤–∞
   89 00000092         ; –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –
                       Ω–∞ –º–∞—Å—Å–∏–≤ —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä R0,
   90 00000092         ; —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä 
                       R1,
   91 00000092         ; —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —á–µ
                       —Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä R2
   92 00000092         ; R0 = *array
   93 00000092         ; R1 = size(array)
   94 00000092         ; R2 = *new_array
   95 00000092         
   96 00000092 4605            MOV              R5, R0
   97 00000094         srav1



ARM Macro Assembler    Page 3 


   98 00000094 F04F 0704       MOV              R7, #0x04
   99 00000098 F04F 0804       MOV              R8, #0x04
  100 0000009C 428B            CMP              R3, R1
  101 0000009E D00D            BEQ              exit1
  102 000000A0 FB07 F703       MUL              R7,R3
  103 000000A4 59E8            LDR              R0, [R5, R7]
  104 000000A6 2800            CMP              R0, #0x00
  105 000000A8 DB05            BLT              iplus1
  106 000000AA FB08 F804       MUL              R8,R4
  107 000000AE F842 0008       STR              R0, [R2, R8]
  108 000000B2 F104 0401       ADD              R4, #0x01
  109 000000B6         iplus1
  110 000000B6 F103 0301       ADD              R3, #0x01
  111 000000BA E7EB            B                srav1
  112 000000BC         exit1
  113 000000BC F04F 0300       MOV              R3, #0x00
  114 000000C0 4620            MOV              R0, R4
  115 000000C2 F04F 0400       MOV              R4, #0x00
  116 000000C6 4770            BX               LR
  117 000000C8                 ENDP
  118 000000C8         
  119 000000C8         avg_prog
                               PROC
  120 000000C8         ; –§—É–Ω–∫—Ü–∏—è (–ø—Ä–æ—Ü–µ–¥—É—Ä–∞) –Ω–∞—Ö–æ–¥–∏—Ç —Å—
                       Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
  121 000000C8         ; –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –
                       Ω–∞ –º–∞—Å—Å–∏–≤ —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä R0
  122 000000C8         ; —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä 
                       R1.
  123 000000C8         ; –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ–∑–
                       ≤—Ä–∞—â–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä R0
  124 000000C8         ; R0 = *array
  125 000000C8         ; R1 = size(array)
  126 000000C8         ; return R0= avg_array
  127 000000C8 F04F 0500       MOV              R5, #0x00
  128 000000CC 4602            MOV              R2, R0
  129 000000CE         srav2
  130 000000CE F04F 0704       MOV              R7, #0x04
  131 000000D2 428B            CMP              R3, R1
  132 000000D4 D006            BEQ              exit2
  133 000000D6 FB07 F703       MUL              R7, R3
  134 000000DA 59D0            LDR              R0, [R2, R7]
  135 000000DC 4405            ADD              R5, R0
  136 000000DE F103 0301       ADD              R3, #0x01
  137 000000E2 E7F4            B                srav2
  138 000000E4         exit2
  139 000000E4 FBB5 F0F3       UDIV             R0, R5, R3
  140 000000E8 4770            BX               LR
  141 000000EA         
  142 000000EA         
  143 000000EA                 ENDP
  144 000000EA         
  145 000000EA                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\main_1.d -o.\objects\main_1.o -IC:\Users\MI\AppData\Loca
l\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include --predefine="__EVAL SETA 1"
 --predefine="__UVISION_VERSION SETA 536" --predefine="STM32F10X_MD SETA 1" --l
ist=.\listings\main_1.lst main_1.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 2 in file main_1.s
   Uses
      None
Comment: .text unused
array_res_asm 00000000

Symbol: array_res_asm
   Definitions
      At line 3 in file main_1.s
   Uses
      At line 4 in file main_1.s
Comment: array_res_asm used once
avg_prog 000000C8

Symbol: avg_prog
   Definitions
      At line 119 in file main_1.s
   Uses
      At line 41 in file main_1.s
Comment: avg_prog used once
exit 00000086

Symbol: exit
   Definitions
      At line 79 in file main_1.s
   Uses
      At line 63 in file main_1.s
Comment: exit used once
exit1 000000BC

Symbol: exit1
   Definitions
      At line 112 in file main_1.s
   Uses
      At line 101 in file main_1.s
Comment: exit1 used once
exit2 000000E4

Symbol: exit2
   Definitions
      At line 138 in file main_1.s
   Uses
      At line 132 in file main_1.s
Comment: exit2 used once
iplus 00000080

Symbol: iplus
   Definitions
      At line 76 in file main_1.s
   Uses
      At line 70 in file main_1.s
Comment: iplus used once
iplus1 000000B6

Symbol: iplus1



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 109 in file main_1.s
   Uses
      At line 105 in file main_1.s
Comment: iplus1 used once
parity_prog 00000052

Symbol: parity_prog
   Definitions
      At line 52 in file main_1.s
   Uses
      At line 17 in file main_1.s
Comment: parity_prog used once
positive_prog 00000092

Symbol: positive_prog
   Definitions
      At line 87 in file main_1.s
   Uses
      At line 31 in file main_1.s
Comment: positive_prog used once
srav 00000052

Symbol: srav
   Definitions
      At line 61 in file main_1.s
   Uses
      At line 78 in file main_1.s
Comment: srav used once
srav1 00000094

Symbol: srav1
   Definitions
      At line 97 in file main_1.s
   Uses
      At line 111 in file main_1.s
Comment: srav1 used once
srav2 000000CE

Symbol: srav2
   Definitions
      At line 129 in file main_1.s
   Uses
      At line 137 in file main_1.s
Comment: srav2 used once
13 symbols
346 symbols in table
